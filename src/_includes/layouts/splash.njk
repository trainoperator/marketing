<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>{{ title or site.meta.title }}</title>
  <meta name="description" content="{{ description or site.meta.description }}">
  <meta name="theme-color" content="{{ site.colors.accent }}">
  <link rel="icon" href="/assets/logo.svg" type="image/svg+xml">
  <link rel="preload" href="/assets/styles/main.css" as="style">
  <link rel="stylesheet" href="/assets/styles/main.css">
  <style>
    /* Allow page to scroll when content exceeds viewport (mobile-friendly) */
    html, body { height:100%; overflow:auto; }
    body { background: var(--bg); }

    #stage {
      position: relative;
      min-height: 100svh;
      width: 100%;
      display: grid;
      place-items: center;
      padding: clamp(16px, 3vw, 28px);
      isolation: isolate;
    }

    /* Large, layered gradient backdrop */
    #stage::before, #stage::after {
      content:"";
      position: absolute; inset: 0;
      z-index: -2;
      background:
        radial-gradient(120rem 120rem at 20% 10%, color-mix(in srgb, var(--accent), transparent 70%), transparent 65%),
        radial-gradient(100rem 100rem at 85% 15%, color-mix(in srgb, var(--secondary), transparent 70%), transparent 68%),
        radial-gradient(90rem 90rem at 50% 100%, color-mix(in srgb, var(--accent), white 20%), transparent 72%);
      filter: saturate(120%);
      opacity: .85;
    }
    #stage::after {
      z-index: -1;
      backdrop-filter: saturate(160%) blur(8px);
    }

    /* Fluid “liquid” panel */
    .panel {
      width: min(100%, 1120px);
      /* Mobile/default: allow growth with content; desktop will add caps */
      height: auto;
      display: grid;
      grid-template-columns: 1fr;
      grid-auto-rows: auto;
      grid-template-areas: 
        "aside"
        "hero";
      gap: clamp(16px, 2.6vw, 28px);
      padding: clamp(16px, 3vw, 28px) clamp(16px, 3vw, 28px) 0 clamp(16px, 3vw, 28px);
      border-radius: 24px;
      background: color-mix(in srgb, var(--surface), white 6%);
      border: 1px solid var(--border);
      box-shadow: var(--shadow);
      /* Let the panel expand naturally on mobile */
      overflow: visible;
    }

    /* Desktop only: on shorter windows, allow up to ~90% viewport height with scrolling if needed */
    @media (min-width: 880px) and (max-height: 1080px) {
      .panel {
        max-height: calc(90svh - clamp(24px, 6vw, 48px) * 2);
        min-height: 50svh;
        height: auto;
        overflow: auto;
      }
    }

    .top {
      display:flex; align-items:center; justify-content:space-between; gap:1rem;
      min-height: 40px;
    }
    .brand {
      display:flex; align-items:center; gap:.75rem; text-decoration:none; color:inherit;
      font-weight:800; letter-spacing:.2px;
    }
    .brand img { width: 36px; height: 36px; border-radius: 10px }
    .brand span { white-space: nowrap }

    .hero {
      display:grid; gap:.6rem;
      grid-template-rows: 1fr auto;
      align-content:stretch;
      grid-area: hero;
      padding-bottom: clamp(16px, 3vw, 28px);
    }
    .hero .cta-row{ align-self:end }
    .aside {
      grid-area: aside;
      /* Ensure the logo sits at the top of its container at all sizes */
      display: grid;
      place-items: start center;
    }
    .eyebrow {
      color: var(--muted);
      letter-spacing:.12em;
      text-transform:uppercase;
      font-size:.78rem;
    }
    .headline {
      font-size: clamp(1.8rem, 6vw, 3.2rem);
      line-height: 1.08;
      margin: 0;
      font-weight: 900;
      letter-spacing: -0.02em;
      background: linear-gradient(180deg, var(--text), color-mix(in srgb, var(--text), transparent 38%));
      -webkit-background-clip:text; background-clip:text; color:transparent;
    }
    .subhead {
      color: var(--muted);
      font-size: clamp(0.98rem, 2vw, 1.1rem);
      max-width: 70ch;
      margin: 0;
    }

    .cta-row { display:flex; gap:.8rem; flex-wrap:wrap; align-items:center; margin-top:.4rem }
    /* Keep CTAs at the bottom without overlapping headline */
    .hero { min-height: 100%; }
    .hero .cta-row { margin-top: auto; align-self: end; }
    /* Contact form actions sit after fields, no overlap */
    .contact-panel .form { min-height: 100%; }
    .contact-panel .form .actions { margin-top: auto; }
    .btn{
      appearance:none; border:none; cursor:pointer;
      display:inline-flex; align-items:center; justify-content:center;
      font-weight:800; text-decoration:none;
      padding:.8rem 1.1rem; border-radius:999px;
      box-shadow: var(--shadow);
      transition: transform .06s ease, filter .2s ease;
      border:1px solid color-mix(in srgb, var(--text), transparent 85%);
    }
    .btn:active{ transform: translateY(1px) }
    .btn-accent{
      background: linear-gradient(160deg, var(--accent), color-mix(in srgb, var(--accent), white 12%));
      color: white; border-color: transparent;
    }
    .btn-ghost{
      background: color-mix(in srgb, var(--surface), transparent 6%);
      color: var(--text);
    }

    .foot {
      display:flex; align-items:center; justify-content:space-between; gap:1rem; flex-wrap:wrap;
      color: var(--muted);
      font-size: .92rem;
      margin-top: clamp(8px, 1vw, 12px);
    }

    /* Compact on short screens */
    @media (max-height: 620px) {
      .headline { font-size: clamp(1.6rem, 5.5vw, 2.2rem) }
      .panel { padding: clamp(12px, 2.2vw, 18px) clamp(12px, 2.2vw, 18px) 0 clamp(12px, 2.2vw, 18px) }
      .cta-row { gap:.6rem }
      .btn { padding:.7rem 1rem }
    }

    /* Two-column on wider viewports */
    @media (min-width: 880px) {
      .panel {
        /* Cap height on desktop but allow internal scrolling when content exceeds cap */
        max-height: calc(55svh - clamp(24px, 6vw, 48px) * 2);
        min-height: 50svh;
        height: auto;
        overflow: auto;
        grid-template-columns: minmax(0, 1.1fr) minmax(0, .9fr);
        grid-template-areas: "hero aside";
        align-items: stretch;
      }
      /* Allow grid children to shrink properly to avoid clipping */
      .hero, .aside { min-width: 0; }
      .hero { }
      .aside {
        justify-self: stretch;
        width: min(100%, 520px);
        aspect-ratio: 4 / 3;
        display: grid;
        /* Top-align the logo while keeping it horizontally centered */
        place-items: start center;
        padding: clamp(8px, 1.2vw, 16px);
      }
      /* Constrain logo; let height be intrinsic so it sits at the top */
      #logo { width: 100%; height: auto; max-width: 100%; max-height: 100%; object-fit: contain; }
    }
  </style>
</head>
<body>
  <main id="stage" role="main" aria-label="Site landing">
    <section class="panel" id="panel">
      <div class="hero" id="hero">
        <h1 class="headline">Software for complex missions.</h1>
        <p class="subhead">&nbsp</p>
        <div class="cta-row">
          <button type="button" class="btn btn-accent js-open-contact">Get in touch</button>
          <a class="btn btn-ghost" href="https://github.com/" rel="noopener">GitHub</a>
        </div>
      </div>

      <div class="aside" aria-hidden="true" id="aside">
          <img id="logo" src="/assets/logo.svg" alt="{{ site.name }} logo" decoding="async" width="100%" />
      </div>

    <!-- Contact panel (hidden by default) -->
    <div class="contact-panel hidden" id="contact-panel" role="dialog" aria-modal="true"
         aria-labelledby="contact-title">
      <button type="button" class="close-btn js-close-contact" aria-label="Close">×</button>
      <h2 id="contact-title">Contact us</h2>
      <form action="https://api.web3forms.com/submit" method="POST" class="form">
        <!-- Replace with your Web3Forms access key -->
        <input type="hidden" name="access_key" value="fe58bbf2-9be1-4f5e-8ffb-57c0fc3ddecb">
        <input type="hidden" name="from_name" value="{{ site.name }}">
        <input type="hidden" name="subject" value="Website contact">
        <!-- honeypot -->
        <input type="checkbox" name="botcheck" class="hidden" tabindex="-1" autocomplete="off">

        <label>
          <span>Name</span>
          <input type="text" name="name" required>
        </label>
        <label>
          <span>Email</span>
          <input type="email" name="email" required>
        </label>
        <label class="full">
          <span>Message</span>
          <textarea name="message" rows="6" required></textarea>
        </label>
        <div class="actions">
          <button type="submit" class="btn btn-accent">Send</button>
          <button type="button" class="btn btn-ghost js-close-contact">Cancel</button>
        </div>
      </form>
      <noscript><p>Please enable JavaScript to contact us.</p>
      </noscript>
    </div>
    </section>
  </main>
  <script>
    const y = document.getElementById('year');
    if (y) y.textContent = new Date().getFullYear();
    (() => {
      const hero = document.getElementById('hero');
      const aside = document.getElementById('aside');
      const contact = document.getElementById('contact-panel');
      const panel = document.getElementById('panel');

      const openBtns = document.querySelectorAll('.js-open-contact');
      const closeBtns = document.querySelectorAll('.js-close-contact');

      // Keep panel the same height while toggling contact panel
      function lockPanelHeight() {
        // Measure current height and lock it so layout doesn't jump
        const h = panel.getBoundingClientRect().height;
        panel.style.height = h + 'px';
        panel.style.overflow = 'hidden';
      }
      function unlockPanelHeight() {
        panel.style.height = '';
        // Restore overflow according to CSS (mobile visible, desktop auto)
        panel.style.overflow = '';
      }

      openBtns.forEach(b => b.addEventListener('click', () => {
        // Lock height before swapping contents
        lockPanelHeight();
        hero.classList.add('hidden');
        aside.classList.add('hidden');
        contact.classList.remove('hidden');
        // Optionally allow a tick before unlocking to avoid flash; keep locked until close for stability
      }));
      closeBtns.forEach(b => b.addEventListener('click', () => {
        contact.classList.add('hidden');
        hero.classList.remove('hidden');
        aside.classList.remove('hidden');
        // Unlock after content is restored so height can adapt again
        unlockPanelHeight();
      }));
    })();
  </script>
</body>
</html>
